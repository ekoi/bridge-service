/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package nl.knaw.dans.dataverse.bridge.service.generated.api;

import nl.knaw.dans.dataverse.bridge.service.generated.model.DarIri;
import nl.knaw.dans.dataverse.bridge.service.generated.model.Error;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.swagger.annotations.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import javax.validation.constraints.*;
import java.io.IOException;
import java.util.List;
import java.util.Optional;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2018-09-03T13:13:10.962+02:00")

@Api(value = "dar", description = "the dar API")
public interface DarApi {

    Logger log = LoggerFactory.getLogger(DarApi.class);

    default Optional<ObjectMapper> getObjectMapper() {
        return Optional.empty();
    }

    default Optional<HttpServletRequest> getRequest() {
        return Optional.empty();
    }

    default Optional<String> getAcceptHeader() {
        return getRequest().map(r -> r.getHeader("Accept"));
    }

    @ApiOperation(value = "Operation to create a new DAR IRI", nickname = "addDarIri", notes = "Add a new DAR IRI. The existing DAR IRI with the same name will be overwritten.", tags={ "DAR IRI", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "DarIri succesfully created."),
        @ApiResponse(code = 400, message = "DarIri couldn't have been created."),
        @ApiResponse(code = 405, message = "Invalid input") })
    @RequestMapping(value = "/dar",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> addDarIri(@ApiParam(value = "" ,required=true) @RequestHeader(value="api_key", required=true) String apiKey,@ApiParam(value = "DAR IRI that needs to be added." ,required=true )  @Valid @RequestBody DarIri darNameAndIri) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DarApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Operation to retrive all DAR Configuration", nickname = "getAllDarIri", notes = "Operation to retrive all DAR IRI ", response = DarIri.class, responseContainer = "List", tags={ "DAR IRI", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Plugin response", response = DarIri.class, responseContainer = "List"),
        @ApiResponse(code = 200, message = "unexpected error", response = Error.class) })
    @RequestMapping(value = "/dar/get-all",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<DarIri>> getAllDarIri() {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("[ {  \"iri\" : \"iri\",  \"dar-name\" : \"dar-name\"}, {  \"iri\" : \"iri\",  \"dar-name\" : \"dar-name\"} ]", List.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DarApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

}
